{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { onMount, tick } from \"svelte\";\n  const hundredMostCommonWords = `a,about,all,also,and,as,at,be,because,but,by,can,come,could,day,do,even,find,first,for,from,get,give,go,have,he,her,here,him,his,how,I,if,in,into,it,its,just,know,like,look,make,man,many,me,more,my,new,no,not,now,of,on,one,only,or,other,our,out,people,say,see,she,so,some,take,tell,than,that,the,their,them,then,there,these,they,thing,think,this,those,time,to,two,up,use,very,want,way,we,well,what,when,which,who,will,with,would,year,you,your`.split(\n    \",\"\n  );\n  let wordsTyped = 0;\n  let inputText = \"\";\n  let secondsElapsed = 0;\n  let currentWordIndex = 0;\n  let dateTimeTypingStarted;\n  let completedSession = false;\n  let timerStarted = false;\n  let timeout;\n  $: currentWordIsSpeltIncorrectly =\n    inputText.length && \n    wordsToType.length && \n    !wordsToType[currentWordIndex].startsWith(inputText);\n  $: timeElapsedDisplay = secondsElapsed === 60 ? `01:00` : `00:${secondsElapsed < 10 ? '0': ''}${secondsElapsed.toString()}`;\n\n  const getRandomNumBetween = (min, max) =>\n    Math.floor(Math.random() * (max - min + 1)) + min;\n\n  let wordsToType = new Array(3000)\n    .fill(\"\")\n    .map((x) => hundredMostCommonWords[getRandomNumBetween(0, 99)]);\n\n  function startTime() {\n    const now = new Date();\n    const secondsBetweenNowAndWhenTypingBegan =\n      (now - dateTimeTypingStarted) / 1000;\n    secondsElapsed = Math.round(secondsBetweenNowAndWhenTypingBegan);\n    if (secondsElapsed >= 60) {\n      completedSession = true;\n      clearTimeout(timeout);\n      wordsToType = [];\n      document.querySelector('#input-text').blur();\n      return;\n    }\n    timeout = setTimeout(startTime, 500);\n  }\n\n  function handleKeyDown(ev) {\n    if (completedSession) {\n      return;\n    }\n    if (!timerStarted) {\n      dateTimeTypingStarted = new Date();\n      startTime();\n      timerStarted = true;\n    }\n\n    if (ev.key === \" \") {\n      ev.preventDefault();\n      const wordMatches = inputText === wordsToType[currentWordIndex];\n        \n      if (wordMatches) {\n        wordsTyped += 1;\n        inputText = \"\";\n        if (currentWordIndex === wordsToType.length) {\n          currentWordIndex = 0;\n        }\n        wordsToType = wordsToType.slice(1);\n      }\n    }\n  }\n\n  onMount(() => {\n    document.querySelector(\"#input-text\").focus();\n  });\n\n  async function restart() {\n    timerStarted = false;\n    secondsElapsed = 0;\n    inputText = '';\n    wordsTyped = 0;\n    wordsToType = new Array(3000)\n      .fill(\"\")\n      .map((x) => hundredMostCommonWords[getRandomNumBetween(0, 99)]);\n    completedSession = false;\n    await tick();\n    document.querySelector(\"#input-text\").focus();\n    dateTimeTypingStarted = null;\n  }\n</script>\n\n<style>\n  .word {\n    padding: 6px;\n    margin: 0;\n    border: 1px solid transparent;\n    font-weight: 600;\n  }\n  .word--active {\n    color: #51726c;\n  }\n  .word-container {\n    margin-bottom: 80px;\n  }\n  .word-container__inner {\n    left: 50%;\n    position: absolute;\n    overflow-y: hidden;\n    width: 250px;\n    display: flex;\n  }\n.word-container__inner::-webkit-scrollbar {\n  display: none;\n}\n.word-container__inner {\n  -ms-overflow-style: none;  /* IE and Edge */\n  scrollbar-width: none;  /* Firefox */\n}\n  .word--incorrect {\n    color: red;\n  }\n  .word-container p {\n    text-align: center;\n  }\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    color: #ff3e00;\n    text-transform: uppercase;\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<main>\n  <h1>Typist</h1>\n  <p>{timeElapsedDisplay}</p>\n  <div class=\"word-container\">\n    <div class=\"word-container__inner\">\n      {#each wordsToType as word, i}\n        <p\n          class:word--active={i === currentWordIndex}\n          class=\"word\"\n          class:word--incorrect={i === currentWordIndex && currentWordIsSpeltIncorrectly}>\n          {word}\n        </p>\n      {/each}\n    </div>\n  </div>\n  {#if !completedSession}\n  <input bind:value={inputText} id=\"input-text\" on:keydown={handleKeyDown} autocomplete=\"off\"/>\n  {/if}\n  {#if completedSession}\n    <p>You typed {wordsTyped} words in a minute!</p>\n    <button on:click={restart}>Go again</button>\n  {/if}\n</main>\n"
  ],
  "names": [],
  "mappings": "AAsFE,KAAK,4BAAC,CAAC,AACL,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,CAAC,CACT,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CAC7B,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,aAAa,4BAAC,CAAC,AACb,KAAK,CAAE,OAAO,AAChB,CAAC,AACD,eAAe,4BAAC,CAAC,AACf,aAAa,CAAE,IAAI,AACrB,CAAC,AACD,sBAAsB,4BAAC,CAAC,AACtB,IAAI,CAAE,GAAG,CACT,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,AACf,CAAC,AACH,kDAAsB,mBAAmB,AAAC,CAAC,AACzC,OAAO,CAAE,IAAI,AACf,CAAC,AACD,sBAAsB,4BAAC,CAAC,AACtB,kBAAkB,CAAE,IAAI,CACxB,eAAe,CAAE,IAAI,AACvB,CAAC,AACC,gBAAgB,4BAAC,CAAC,AAChB,KAAK,CAAE,GAAG,AACZ,CAAC,AACD,6BAAe,CAAC,CAAC,cAAC,CAAC,AACjB,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,IAAI,4BAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,EAAE,4BAAC,CAAC,AACF,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,4BAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC"
}